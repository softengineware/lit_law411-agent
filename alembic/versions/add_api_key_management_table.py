"""Add API key management table

Revision ID: add_api_key_table
Revises: 3397ec721695
Create Date: 2024-12-13 10:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'add_api_key_table'
down_revision = '3397ec721695'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('api_keys',
    sa.Column('id', postgresql.UUID(as_uuid=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for the API key'),
    sa.Column('description', sa.Text(), nullable=True, comment='Optional description of the API key purpose'),
    sa.Column('key_hash', sa.String(length=255), nullable=False, comment='Hashed API key for secure storage'),
    sa.Column('key_prefix', sa.String(length=8), nullable=False, comment='First 8 characters of key for identification'),
    sa.Column('user_id', postgresql.UUID(as_uuid=False), nullable=False, comment='Owner of this API key'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the API key is active'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='When the API key expires (null = never)'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='When the API key was last used'),
    sa.Column('last_used_ip', sa.String(length=45), nullable=True, comment='IP address of last API key usage'),
    sa.Column('scopes', sa.JSON(), nullable=True, comment='List of allowed scopes/permissions for this key'),
    sa.Column('rate_limit_per_minute', sa.Integer(), nullable=False, comment='Rate limit: requests per minute'),
    sa.Column('rate_limit_per_hour', sa.Integer(), nullable=False, comment='Rate limit: requests per hour'),
    sa.Column('rate_limit_per_day', sa.Integer(), nullable=False, comment='Rate limit: requests per day'),
    sa.Column('total_requests', sa.Integer(), nullable=False, comment='Total number of requests made with this key'),
    sa.Column('requests_today', sa.Integer(), nullable=False, comment='Number of requests made today'),
    sa.Column('requests_this_hour', sa.Integer(), nullable=False, comment='Number of requests made this hour'),
    sa.Column('requests_this_minute', sa.Integer(), nullable=False, comment='Number of requests made this minute'),
    sa.Column('user_agent', sa.String(length=512), nullable=True, comment='User agent of the last request'),
    sa.Column('key_metadata', sa.JSON(), nullable=True, comment='Additional metadata for the API key'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_hash')
    )
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_table('api_keys')
    # ### end Alembic commands ###